local CONFIG = a_idiots_config
local DXML   = require "illish.dxml"
local TABLE  = require "illish.table"


function parseIndexers(XML, el, config)
  local attrs = XML:getAttrWithInherit(el, {"font", "tabCount"})
  local size, tabCount = attrs.size  or 0, attrs.tabCount or 0

  for i = 1, attrs.tabCount do
    local indexer = XML:convertElement({
      name = "indexer_".. i,
      attr = {
        font    = attrs.font,
        width   = size,
        height  = size,
        stretch = 1,
        label   = i,
      }
    })

    XML:insertElement(indexer, el)
    addLabel(XML, indexer)
  end
end


function parseTitlebarIcon(XML, el, pos)
  local icon     = XML:queryOne("icon", el)
  local attrs    = XML:getAttrWithInherit(icon, {"xgap"})
  local tbheight = XML:getElementAttr(el).height or 0

  pos = pos or {0, 0}

  local width, height, xgap =
    attrs.width  or 0,
    attrs.height or 0,
    attrs.xgap     or 0

  XML:setElementAttr(icon, {
    x       = pos[1],
    y       = pos[2] + (tbheight - height) / 2,
    stretch = 1,
  })

  pos[1] = pos[1] + width + xgap
end


function parseTitlebarTitle(XML, el, pos)
  local title    = XML:queryOne("title", el)
  local attrs    = XML:getAttrWithInherit(title, {"font"})
  local tbheight = XML:getElementAttr(el).height or 0

  pos = pos or {0, 0}

  XML:setElementAttr(title, {
    x       = pos[1],
    y       = pos[2],
    height  = tbheight,
    stretch = 1,
  })

  local text = XML:convertElement({
    name = "text",
    kids = {{el = "#".. (attrs.label or "")}},
    attr = {
      font         = attrs.font,
      align        = "l",
      vert_align   = "c",
      complex_mode = 1,
    },
  })

  XML:insertElement(text, title)
  pos[1] = pos[1] + (attrs.width or 0)
end


function parseTitlebarActions(XML, el, pos)
  local actions  = XML:queryOne("actions", el)
  local tbheight = XML:getElementAttr(el).height or 0

  pos = pos or {0, 0}

  parseActions(XML, actions, {pos[1], 0})
  local attrs = XML:getElementAttr(actions)

  XML:setElementAttr(actions, {
    x = pos[1] - (attrs.width or 0),
    y = pos[2] + (tbheight - (attrs.height or 0)) / 2
  })
end


function parseTitlebar(XML, el, pos, config)
  local attrs = XML:getElementAttr(el)

  local xpad, ypad, width, height =
    attrs.xpad     or 0,
    attrs.ypad     or 0,
    attrs.width  or 0,
    attrs.height or 0

  local tbpos = {xpad, ypad}

  parseTitlebarIcon(XML, el, tbpos)
  parseTitlebarTitle(XML, el, tbpos)

  tbpos[1] = attrs.width - xpad
  parseTitlebarActions(XML, el, tbpos)

  XML:setElementAttr(el, {
    x       = pos and pos[1],
    y       = pos and pos[2],
    height  = attrs.height + ypad * 2,
    stretch = 1,
  })
end


function parseTabs(XML, el, pos, config)
  local attrs = XML:getAttrWithInherit(el, {"font", "tabCount"})

  local xpad, ypad, xgap, wtab, htab, tabCount =
    attrs.xpad    or 0,
    attrs.ypad    or 0,
    attrs.xgap    or 0,
    attrs.wtab    or 0,
    attrs.htab    or 0,
    attrs.tabCount or 0

  local tpos = {xpad, ypad}

  for i = 0, attrs.tabCount do
    local label, name = i, "tab_".. i

    if i == 0 then
      label = attrs.label
      name  = "tab_all"
    else
      tpos[1] = tpos[1] + xgap
    end

    local tab = XML:convertElement({
      name = name,
      attr = {
        label   = label,
        font    = attrs.font,
        x       = tpos[1],
        y       = tpos[2],
        width   = attrs.wtab,
        height  = attrs.htab,
        stretch = 1,
      }
    })

    addLabel(XML, tab)

    XML:insertElement(tab, el)
    tpos[1] = tpos[1] + wtab
  end

  tpos[2] = tpos[2] + htab

  XML:setElementAttr(el, {
    x       = pos and pos[1],
    y       = pos and pos[2],
    width   = tpos[1] + xpad,
    height  = tpos[2] + ypad,
    stretch = 1,
  })
end


function addToggle(XML, el, pos)
  local attrs = XML:getAttrWithInherit(el, {"toggleSize", "togglePad"})
  local name  = XML:getElementName(el)

  pos = pos or {0, 0}

  local toggleSize, togglePad, height =
    attrs.toggleSize or 0,
    attrs.togglePad  or 0,
    attrs.height     or 0

  local texture = XML:convertElement({
    name = "texture",
    kids = {{el = "#idiots_ui_dark"}}
  })

  pos[1] = pos[1] + togglePad

  local toggle = XML:convertElement({
    name = "toggle",
    kids = {texture},
    attr = {
      x       = pos[1],
      y       = pos[2] + (height - toggleSize) / 2,
      width   = toggleSize,
      height  = toggleSize,
      stretch = 1,
    },
  })

  pos[1] = pos[1] + toggleSize + togglePad
  XML:insertElement(toggle, el)
end


function addIcon(XML, el, pos)
  local attrs = XML:getAttrWithInherit(el, {"icon", "compact", "iconSize", "iconPad"})
  local name  = XML:getElementName(el)

  pos = pos or {0, 0}

  local iconSize, iconPad, width, height =
    attrs.iconSize or 0,
    attrs.iconPad  or 0,
    attrs.width    or 0,
    attrs.height   or 0

  local hint = attrs.hint == "1"
    and "st_idiots_".. name:lower()
    or  attrs.hint

  local icon = attrs.icon == "1"
    and "icon_idiots_".. name:lower()
    or  attrs.icon

  local texture = XML:convertElement({
    name = "texture",
    kids = {{el = "#".. icon}}
  })

  pos[1] = attrs.compact
    and pos[1] + (width - pos[1] - iconSize) / 2
    or  pos[1] + iconSize

  local icon = XML:convertElement({
    name = "icon",
    kids = {texture},
    attr = {
      hint    = hint,
      x       = pos[1],
      y       = pos[2] + (height - iconSize) / 2,
      width   = iconSize,
      height  = iconSize,
      stretch = 1,
    },
  })

  pos[1] = attrs.compact
    and width
    or  pos[1] + iconSize + iconPad

  XML:insertElement(icon, el)
end


function addLabel(XML, el, pos)
  local attrs = XML:getAttrWithInherit(el, {"label", "toggle", "icon", "font", "group"})
  local name  = XML:getElementName(el)

  pos = pos or {0, 0}
  local width, height = attrs.width or 0, attrs.height or 0

  local str = attrs.label
    or "st_idiots_".. (attrs.group and attrs.group .."_" or "").. name:lower()

  local align = (attrs.toggle or attrs.icon)
    and "l" or "c"

  local text = XML:convertElement({
    name = "text",
    kids = {{el = "#".. str}},
    attr = {
      font         = attrs.font,
      align        = align,
      vert_align   = "c",
      complex_mode = 1
    },
  })

  local label = XML:convertElement({
    name = "label",
    kids = {text},
    attr = {
      x       = pos[1],
      y       = pos[2],
      width   = width - pos[1],
      height  = height,
      stretch = 1,
    },
  })

  pos[1] = width
  XML:insertElement(label, el)
end


function parseAction(XML, el, pos)
  local attrs = XML:getAttrWithInherit(el, {"waction", "haction", "xgap", "ygap", "toggle", "icon", "compact", "group"})

  local waction, haction, xgap, ygap, width, height =
    attrs.waction or 0,
    attrs.haction or 0,
    attrs.xgap    or 0,
    attrs.ygap    or 0,
    attrs.width   or attrs.waction or 0,
    attrs.height  or attrs.haction or 0

  XML:setElementAttr(el, {
    stretch = 1,
    group   = attrs.group,
    width   = width,
    height  = height,
    x       = pos and pos[1],
    y       = pos and pos[2],
  })

  pos[1] = pos[1] + width
  local cpos = {0, 0}

  if attrs.toggle then
    addToggle(XML, el, cpos)
  end
  if attrs.icon then
    addIcon(XML, el, cpos)
  end
  if not attrs.compact then
    addLabel(XML, el, cpos)
  end
end


function parseActions(XML, el, pos, config)
  local cols  = XML:query("col", el)
  local attrs = XML:getElementAttr(el)

  local xpad, ypad  = attrs.xpad or 0, attrs.ypad or 0
  local rpos    = {xpad, ypad}
  local mw, mh  = 0, 0

  for index, col in ipairs(cols) do
    rpos[2], mw = ypad, 0

    local attrs = XML:getAttrWithInherit(col, {"waction", "haction", "xgap", "ygap"})
    local xgap    = attrs.xgap or 0

    if index > 1 then
      rpos[1] = rpos[1] + xgap
    end

    XML:iterateElements(col, function(child, index)
      local attrs = XML:getAttrWithInherit(child, {"waction", "haction", "xgap", "ygap"})

      local waction, haction, xgap, ygap =
        attrs.width  or attrs.waction or 0,
        attrs.height or attrs.haction or 0,
        attrs.xgap or 0,
        attrs.ygap or 0

      if index > 1 then
        rpos[2] = rpos[2] + ygap
      end

      local cpos = {rpos[1], rpos[2]}

      if XML:getElementName(child) == "row" then
        XML:setElementAttr(child, {
          waction = (waction - xgap * (#child.kids - 1)) / #child.kids
        })

        XML:iterateElements(child, function(action, index)
          if index > 1 then
            cpos[1] = cpos[1] + xgap
          end

          parseAction(XML, action, cpos)
          XML:insertElement(action, el)
        end)
      else
        parseAction(XML, child, cpos)
        XML:insertElement(child, el)
      end

      rpos[2] = rpos[2] + haction
      mw = math.max(mw, waction)
      mh = math.max(mh, rpos[2])
    end)

    XML:removeElement(col)
    rpos[1] = rpos[1] + mw
  end

  XML:setElementAttr(el, {
    x       = pos and pos[1],
    y       = pos and pos[2],
    width   = rpos[1] + xpad,
    height  = mh + ypad,
    stretch = 1
  })

  pos[2] = pos[2] + mh + ypad


  local names = XML:iterateElements(el, function(child)
    return XML:getElementName(child)
  end)

  XML:setElementAttr(el, {names = table.concat(names, ',')})
end


function parseContainer(XML, el, config)
  local bounds = XML:getChildBounds(el)

  XML:setElementAttr(el, {
    width   = bounds.w,
    height  = bounds.h,
    stretch = 1,
  })

  local attrs = XML:getElementAttr(el)
  local x, y = 0, 0

  if attrs.xalign == "center" then
    x = (1024 - attrs.width) / 2
  elseif attrs.xalign == "right" then
    x = 1024 - attrs.width
  end

  if attrs.yalign == "center" then
    y = (768 - attrs.height) / 2
  elseif attrs.yalign == "bottom" then
    y = 768 - attrs.height
  end

  XML:setElementAttr(el, {
    x = x + (attrs.xoffset or 0),
    y = y + (attrs.yoffset or 0)
  })
end


function applyOptions(XML, config)
  if not config.jobs then
    local jobs = XML:queryOne("col[group=jobs]")
    if jobs then
      XML:removeElement(jobs)
    end
  end

  if not config.artifacts then
    local artifacts = XML:queryOne("loot_artifacts")
    if artifacts then
      XML:removeElement(artifacts)
    end
  end

  local container = XML:queryOne("container")
  if not container then
    return
  end

  local attrs = XML:getElementAttr(container)

  XML:setElementAttr(container, {
    font    = config.font or attrs.font,
    xoffset = config.offsetX or attrs.xoffset,
    yoffset = config.offsetY or attrs.yoffset,
  })
end


function onReadHUDXML(name, XML)
  if name ~= "ui\\idiots_ui.xml" then
    return
  end

  local config = {
    jobs       = ui_mcm.get("idiots/options/jobs"),
    artifacts  = ui_mcm.get("idiots/options/artifacts"),
    font       = ui_mcm.get("idiots/options/font"),
    scaleX     = ui_mcm.get("idiots/options/scaleX"),
    scaleY     = ui_mcm.get("idiots/options/scaleY"),
    offsetX    = ui_mcm.get("idiots/options/offsetX"),
    offsetY    = ui_mcm.get("idiots/options/offsetY"),
  }

  DXML.extendXMLObject(XML)
  applyOptions(XML, config)

  local pos = {0, 0}

  local indexers = XML:queryOne("container > indexers")
  parseIndexers(XML, indexers, config)

  local actions = XML:queryOne("container > actions")
  parseActions(XML, actions, {0, 0}, config)

  local width = XML:getElementAttr(actions).width

  local tabs = XML:queryOne("container > tabs")
  XML:setElementAttr(tabs, {width = width})
  parseTabs(XML, tabs, pos, config)

  pos[2] = pos[2] + XML:getElementAttr(tabs).height

  local titlebar = XML:queryOne("container > titlebar")
  XML:setElementAttr(titlebar, {width = width})
  parseTitlebar(XML, titlebar, pos, config)

  local tbpy  = XML:getElementAttr(titlebar).ypad or 0
  local actpy = XML:getElementAttr(actions).ypad  or 0
  pos[2] = pos[2] + XML:getElementAttr(titlebar).height - math.min(tbpy, actpy)

  XML:setElementAttr(actions, {y = pos[2]})

  local container = XML:queryOne("container")
  XML:fixAndScaleAll(container, config.scaleX, config.scaleY)
  parseContainer(XML, container, config)
end


function onReadKeybindingXML(name, XML)
  if not name:match("^ui\\ui_keybinding") then
    return
  end

  DXML.extendXMLObject(XML)

  for i, element in ipairs({
    XML:queryOne("command[id=kb_companion_combat]"),
    XML:queryOne("command[id=kb_companion_movement]"),
    XML:queryOne("command[id=kb_companion_move]"),
    XML:queryOne("command[id=kb_companion_cover]"),
    XML:queryOne("command[id=kb_companion_loot]"),
  }) do
    if element then
      XML:removeElement(element)
    end
  end
end


function on_xml_read()
  RegisterScriptCallback("on_xml_read", onReadHUDXML)
  RegisterScriptCallback("on_xml_read", onReadKeybindingXML)
end
