local CONFIG = a_idiots_config
local U      = z_idiots_utils


DEFAULT_STATE = {}
GLOBAL_STATE  = {}


function initialize()
  for ig, group in ipairs(CONFIG.ACTIONS) do
    DEFAULT_STATE[group.name] = {}

    for ia, action in ipairs(group.actions) do
      DEFAULT_STATE[group.name][action.name] = action.default or false
    end
  end

  GLOBAL_STATE = dup_table(DEFAULT_STATE)
end

initialize()


function isStateful(group, action)
  return group and action
    and DEFAULT_STATE[group]
    and DEFAULT_STATE[group][action] ~= nil
end


function getState(npc, group, action)
  if not isStateful(group, action) then
    return
  end

  if not npc then
    return GLOBAL_STATE[group][action]
  end

  if type(npc) == "number" then
    npc = U.getCompanion(npc)
  end
  if not npc then
    return
  end

  local info = CONFIG.ACTIONS_KEYED[group].actions[action].info

  if info then
    return npc:has_info(info)
  end

  if not CONFIG.ACTIONS_KEYED[group].cycle then
    return false
  end

  for act, config in pairs(CONFIG.ACTIONS_KEYED[group].actions) do
    if config.info and npc:has_info(config.info) then
      return false
    end
  end

  return true
end


function getAllStates(npc)
  if npc == nil then
    return dup_table(GLOBAL_STATE)
  end

  local states = {}

  for group, actions in pairs(DEFAULT_STATE) do
    states[group] = {}

    for action in pairs(actions) do
      states[group][action] = getState(npc, group, action)
    end
  end

  return states
end


function getActiveState(npc, group)
  if not (CONFIG.ACTIONS_KEYED[group] and CONFIG.ACTIONS_KEYED[group].cycle) then
    return
  end

  for action, config in pairs(CONFIG.ACTIONS_KEYED[group].actions) do
    if getState(npc, group, action) then
      return action
    end
  end
end


function __set(npc, group, action, enabled)
  if not isStateful(group, action) then
    return
  end

  if not npc then
    GLOBAL_STATE[group][action] = enabled
    SendScriptCallback("idiots_on_state", nil, group, action, enabled)
    return
  end

  if type(npc) == "number" then
    npc = U.getCompanion(npc)
  end

  if not npc then
    return
  end

  local info = CONFIG.ACTIONS_KEYED[group].actions[action].info

  if info then
    U.setInfoPortion(npc, info, enabled)
  end

  SendScriptCallback("idiots_on_state", npc:id(), group, action, enabled)
end


function setState(npc, group, action, enabled)
  if not isStateful(group, action) then
    return
  end

  if enabled == getState(npc, group, action) then
    return
  end

  if not CONFIG.ACTIONS_KEYED[group].cycle then
    __set(npc, group, action, enabled)

  elseif enabled then
    for other in pairs(CONFIG.ACTIONS_KEYED[group].actions) do
      __set(npc, group, other, other == action)
    end
  end

  if not npc then
    for i, npc in ipairs(U.getCompanions()) do
      setState(npc, group, action, enabled)
    end
  end
end


function setStates(npc, states)
  for group, actions in pairs(states) do
    for action, enabled in pairs(actions) do
      setState(npc, group, action, enabled)
    end
  end
end


function cycleActiveState(npc, group)
  local active = getActiveState(npc, group)

  if not active then
    return
  end

  local next = CONFIG.ACTIONS_KEYED[group].actions[active].next

  if next then
    setState(npc, group, next, true)
    return next
  end
end


function toggleState(npc, group, action)
  if not isStateful(group, action) then
    return
  end

  local enabled = true

  if CONFIG.ACTIONS_KEYED[group].toggle then
    enabled = not getState(npc, group, action)
  end

  if enabled ~= getState(npc, group, action) then
    setState(npc, group, action, enabled)
    return enabled
  end
end


function saveCompanionStates(mdata)
  local data = mdata[CONFIG.MDATA_KEY]

  data.globalState     = GLOBAL_STATE
  data.companionStates = {}

  for i, npc in ipairs(U.getCompanions()) do
    data.companionStates[npc:id()] = getAllStates(npc)
  end
end


function loadCompanionStates()
  local mdata = alife_storage_manager.get_state()
  local data  = mdata[CONFIG.MDATA_KEY]

  if data.globalState then
    GLOBAL_STATE = data.globalState
  end

  if data.companionStates then
    for id, states in pairs(data.companionStates) do
      setStates(id, states)
    end
  end
end


function migrateCompanionStates(mdata)
  GLOBAL_STATE = dup_table(DEFAULT_STATE)

  for i, npc in ipairs(U.getCompanions()) do
    setStates(npc, GLOBAL_STATE)
    save_var(npc, "fight_from_point", nil)
  end
end


function on_game_start()
  RegisterScriptCallback("idiots_on_version", migrateCompanionStates)
  RegisterScriptCallback("actor_on_first_update", loadCompanionStates)
  RegisterScriptCallback("save_state", saveCompanionStates)
end


AddScriptCallback("idiots_on_state")


local __add_actor = axr_companions.add_to_actor_squad


function axr_companions.add_to_actor_squad(npc)
  __add_actor(npc)

  if U.isCompanion(npc) then
    setStates(npc, GLOBAL_STATE)
  end
end


function axr_companions.companion_squad_can_teleport(squad)
  local sim = alife()
  local id  = squad:commander_id()
  local se  = sim:object(id)

  if se and se_load_var(se.id, se:name(), "companion_cannot_teleport") then
    return false
  end

  for ig, group in ipairs(CONFIG.ACTIONS) do
    for ia, action in ipairs(group.actions) do
      if action.teleport == false and getState(id, group.name, action.name) then
        return false
      end
    end
  end

  return true
end
